// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ユーザーモデル
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  authId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  messages Message[]
  channels ChannelMember[]
}

// チャンネルモデル
model Channel {
  id          String   @id @default(cuid())
  name        String? // DM の場合は null
  description String? // DM の場合は null
  type        String // "channel" または "dm"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  messages Message[]
  members  ChannelMember[]
}

// チャンネルメンバー （中間テーブル）
model ChannelMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String

  @@unique([userId, channelId])
}

// メッセージモデル
model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  sender    User    @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
}

// AI チャットモデル
model AiChat {
  id        String   @id @default(cuid())
  userId    String
  // ユーザーのメッセージ
  message   String
  // AI の応答
  response  String
  createdAt DateTime @default(now())
}
